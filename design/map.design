DOMAIN MAP
----------

a domain stream is generated from a domain address

the domain stream is analyzed by the domain filter
to produce the base fragment map

the domain stream within the base fragments
are analyzed by the domain scannerlib
to produce a full fragment map and an analytical map.

the full fragment map is referenced by the analytical map.



FRAGMENT MAP
------------

fragments link together in hierarchy and sequence

linkage is facilitated by a fragment cell object
which acts as a container of sequential fragments.
and which can nest other cells within it.



ANALYTICAL MAP
--------------

generated by scanner grammars, the analytical map
is a hierarchical object representation of the parsed stream
a number of grammars can be overlapping within the map.
in general, the map has a tree-like structure
with the start symbols of each grammar as branch nodes under 
the non-symbol analytical root.

the grammar then is mapped out from each start symbol to its
terminal symbols at the leaves.

like the fragments, the grammar mappings are hierarchical and 
sequential.

each a-map entry contains:
a GUID for its grammar rule,
a link to the appropriate fragment or fragment cell,
a link to its first constituent rule map entry,
a link to its next consecutive map entry.


An index of scanner rule GUIDs is searchable from the scannerlib.
When the hiena lookup function processes the request string
it sends any grammar name requests to the index to acquire the GUID.


A map-local index of arrays, searchable by GUID produces an array for each GUID.
Each array is a sequence of matches for a particular rule.
You can step through or select a range of rule mappings via this mechanism.


for instance, lets define a scanner for a list object:

list := element + ;	/* list is comprised of one or more sequential elements */
element := 'A' | 'B' ;  /* an element is comprised of an A or B character */


$string = "ABBABA"
$string.list::element[2]	/* selects a 'B' from string mapped by 'list' grammar */


DIRECTORY MAP
-------------

A domain map also has subordinate maps.  A directory of the domain points us
to children of the domain.  A child can be a fragment of the parent domain.
It can alternatively take its domain stream from an external source.


for instance, a list of filepaths:

list of filepaths:
/bin/sh
/usr/local/lib/cosmosfs/test
/home/raygan/test/ox/oxtest.ox
;


a grammar to parse the list:

pathlist := "list of filepaths:\n"
            (  {:: filepath ::} '\n' )*	/* declares zero or more child mappings */
	    ";\n"
{
    $filepath.addr = $filepath.valu;
    $filepath.serv = "file";
    mapping_set_prop($filepath, "name", 
	    mapping_get_prop($filepath, "filename[-0]") 	/* select 0'th from last filename */
	    );
}
	 ;
filepath := pathseg + ;
pathseg  := '/' filename ;
filename := {%  [[:alpha:]]+([.][[:alpha:]]+)?  %} ;



INTERNAL PARSING OF DIRECTORY GRAMMARS
--------------------------------------

bcdir := 'a' {:: 'b' | 'c' ::}+ 'd' ;

/* bison */
/* setup semantic value to be <hiena_mappob> */
%%
bcdir	: atype children dtype
	{
	    map_add($$, "atype", $atype);
	    directory_set($$, $children);
	    map_add($$, "dtype", $dtype);
	}
	;

children: child
        {
	    directory_add($$, $child);
	}
	| children child
        {
	    $$ = $children;
	    directory_add($$, $child);
	}
	;
child   : btype
	{
	    map_add($$, "name", $btype);
	}
	| ctype
	{
	    map_add($$, "name", $ctype);
	}
	;
atype   : 'a' ;		/* we would add location tracking logic here */
btype	: 'b' ;		/* but for this example, we omit */
ctype	: 'c' ;
dtype   : 'd' ;


/* end bison */

